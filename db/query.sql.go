// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const createTeam = `-- name: CreateTeam :one
INSERT INTO team (
  name, country, class, championship_id
) VALUES (
  ?, ?, ?, ?
)
RETURNING id, name, country, class, championship_id
`

type CreateTeamParams struct {
	Name           string
	Country        string
	Class          string
	ChampionshipID sql.NullInt64
}

func (q *Queries) CreateTeam(ctx context.Context, arg CreateTeamParams) (Team, error) {
	row := q.db.QueryRowContext(ctx, createTeam,
		arg.Name,
		arg.Country,
		arg.Class,
		arg.ChampionshipID,
	)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Country,
		&i.Class,
		&i.ChampionshipID,
	)
	return i, err
}

const listTeams = `-- name: ListTeams :many
SELECT t.name, t.country, t.class, c.name as championship FROM team t, championship c where t.championship_id = c.id
`

type ListTeamsRow struct {
	Name         string
	Country      string
	Class        string
	Championship string
}

func (q *Queries) ListTeams(ctx context.Context) ([]ListTeamsRow, error) {
	rows, err := q.db.QueryContext(ctx, listTeams)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListTeamsRow
	for rows.Next() {
		var i ListTeamsRow
		if err := rows.Scan(
			&i.Name,
			&i.Country,
			&i.Class,
			&i.Championship,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
